%!PS-Adobe-3.0 EPSF-3.0
%%Creator: gEDA gschem 1.6.1-20100214-22-ga30f00b
%%CreationDate: Mon Mar 24 20:18:40 2014
%%Title: /home/joel/sync/ShockSoc/rex_fuzz/1.sch
%%Author: joel
%%BoundingBox: 0 0 1058 439
%%Orientation: Portrait
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
0 0 translate
1.000000 1.000000 scale
-58500 -43600 translate
gsave
59100 47800 59400 47800 10 line
gsave
false false false true 208.000000 [(1) ] 0 58550 47850 144.444443 text
grestore
59100 47600 59400 47600 10 line
gsave
false false false true 208.000000 [(2) ] 0 58550 47650 144.444443 text
grestore
58900 47800 58800 47700 10 line
58800 47700 58700 47800 10 line
58900 47800 59100 47800 10 line
58700 47600 59100 47600 10 line
58500 47500 59100 47500 10 line
59100 47500 59100 47900 10 line
59100 47900 58500 47900 10 line
58500 47900 58500 47500 10 line
grestore
gsave
false false false true 260.000000 [(Input) ] 0 58500 47400 180.555557 text
grestore
gsave
64300 47800 64150 47800 10 line
63400 47800 63550 47800 10 line
63550 47700 64150 47700 10 line
64150 47700 64150 47900 10 line
64150 47900 63550 47900 10 line
63550 47900 63550 47700 10 line
grestore
gsave
false false false false 260.000000 [(100K) ] 0 63600 48000 180.555557 text
grestore
gsave
64900 48000 64900 47200 10 line
64900 48000 65500 47600 10 line
65500 47600 64900 47200 10 line
65000 47450 65000 47350 10 line
64950 47400 65050 47400 10 line
64950 47800 65050 47800 10 line
64700 47400 64900 47400 10 line
gsave
false false false false 260.000000 [(3) ] 0 64700 47400 180.555557 text
grestore
64700 47800 64900 47800 10 line
gsave
false false false false 260.000000 [(2) ] 0 64700 47800 180.555557 text
grestore
65500 47600 65700 47600 10 line
gsave
false false false false 260.000000 [(1) ] 0 65500 47600 180.555557 text
grestore
65200 47800 65200 48000 10 line
gsave
false false false false 260.000000 [(11) ] 0 65300 47800 180.555557 text
grestore
65200 47400 65200 47200 10 line
gsave
false false false false 260.000000 [(4) ] 0 65300 47300 180.555557 text
grestore
grestore
gsave
65200 48400 65200 48600 10 line
65050 48600 65350 48600 10 line
gsave
false false false false 208.000000 [(Vcc) ] 0 65075 48650 144.444443 text
grestore
grestore
gsave
65600 49100 65450 49100 10 line
64700 49100 64850 49100 10 line
64850 49000 65450 49000 10 line
65450 49000 65450 49200 10 line
65450 49200 64850 49200 10 line
64850 49200 64850 49000 10 line
grestore
gsave
false false false false 260.000000 [(1M) ] 0 64900 49300 180.555557 text
grestore
gsave
67400 46200 67250 46200 10 line
66500 46200 66650 46200 10 line
66650 46100 67250 46100 10 line
67250 46100 67250 46300 10 line
67250 46300 66650 46300 10 line
66650 46300 66650 46100 10 line
grestore
gsave
false false false false 260.000000 [(10K) ] 0 66700 46400 180.555557 text
grestore
gsave
68900 49100 68750 49100 10 line
68000 49100 68150 49100 10 line
68150 49000 68750 49000 10 line
68750 49000 68750 49200 10 line
68750 49200 68150 49200 10 line
68150 49200 68150 49000 10 line
grestore
gsave
false false false false 260.000000 [(10K) ] 0 68200 49300 180.555557 text
grestore
gsave
69300 49000 69300 48800 10 line
69300 48300 69300 48100 10 line
69600 48500 69800 48500 10 line
69200 48300 69400 48300 10 line
69400 48300 69400 48800 10 line
69400 48800 69200 48800 10 line
69200 48800 69200 48300 10 line
69600 48500 69400 48500 10 line
69400 48500 69500 48550 10 line
69400 48500 69500 48450 10 line
grestore
gsave
false false false false 260.000000 [(1M) ] 0 69500 48600 180.555557 text
grestore
gsave
false false false false 260.000000 [(Drive) ] 0 69400 48900 180.555557 text
grestore
gsave
70700 45700 70700 45500 10 line
70700 45000 70700 44800 10 line
71000 45200 71200 45200 10 line
70600 45000 70800 45000 10 line
70800 45000 70800 45500 10 line
70800 45500 70600 45500 10 line
70600 45500 70600 45000 10 line
71000 45200 70800 45200 10 line
70800 45200 70900 45250 10 line
70800 45200 70900 45150 10 line
grestore
gsave
false false false false 260.000000 [(10K) ] 0 70050 45000 180.555557 text
grestore
gsave
false false false false 260.000000 [(Level) ] 0 70000 45300 180.555557 text
grestore
gsave
68200 46400 68200 45600 10 line
68200 46400 68800 46000 10 line
68800 46000 68200 45600 10 line
68300 45850 68300 45750 10 line
68250 45800 68350 45800 10 line
68250 46200 68350 46200 10 line
68000 45800 68200 45800 10 line
gsave
false false false false 260.000000 [(8) ] 0 68000 45800 180.555557 text
grestore
68000 46200 68200 46200 10 line
gsave
false false false false 260.000000 [(9) ] 0 68000 46200 180.555557 text
grestore
68800 46000 69000 46000 10 line
gsave
false false false false 260.000000 [(12) ] 0 68800 46000 180.555557 text
grestore
68500 46200 68500 46400 10 line
gsave
false false false false 260.000000 [(10) ] 0 68600 46200 180.555557 text
grestore
68500 45800 68500 45600 10 line
gsave
false false false false 260.000000 [(11) ] 0 68600 45700 180.555557 text
grestore
grestore
gsave
68000 46900 68200 46900 10 line
68900 46900 68700 46900 10 line
68400 47100 68400 46700 10 line
68500 47100 68500 46700 10 line
68700 46900 68500 46900 10 line
68400 46900 68200 46900 10 line
grestore
gsave
false false false false 260.000000 [(47pF) ] 0 67900 47000 180.555557 text
grestore
gsave
68300 48600 68300 48200 10 line
68300 48600 68600 48400 10 line
68600 48400 68300 48200 10 line
68600 48600 68600 48200 10 line
68000 48400 68200 48400 10 line
68900 48400 68700 48400 10 line
68700 48400 68600 48400 10 line
68300 48400 68200 48400 10 line
grestore
gsave
false false false false 260.000000 [(1N914) ] 0 68100 48700 180.555557 text
grestore
gsave
68600 47400 68600 47800 10 line
68600 47400 68300 47600 10 line
68300 47600 68600 47800 10 line
68300 47400 68300 47800 10 line
68900 47600 68700 47600 10 line
68000 47600 68200 47600 10 line
68200 47600 68300 47600 10 line
68600 47600 68700 47600 10 line
grestore
gsave
false false false false 260.000000 [(1N914) ] 0 68150 47850 180.555557 text
grestore
gsave
60900 46800 60700 46800 10 line
gsave
false false false true 208.000000 [(1) ] 0 60750 46750 144.444443 text
grestore
59800 46800 60000 46800 10 line
gsave
false true false true 208.000000 [(2) ] 0 59950 46750 144.444443 text
grestore
60600 46600 60600 47000 10 line
60500 46700 60500 46900 10 line
60400 46600 60400 47000 10 line
60300 46700 60300 46900 10 line
60000 46800 60100 46800 10 line
60700 46800 60600 46800 10 line
60200 46600 60200 47000 10 line
60100 46700 60100 46900 10 line
grestore
gsave
false true false true 260.000000 [(9V  +) ] 0 60700 46500 180.555557 text
grestore
gsave
63200 45300 63200 45100 10 line
gsave
false true false false 208.000000 [(1) ] 270 63250 45150 144.444443 text
grestore
63200 44400 63200 44600 10 line
gsave
false false false false 208.000000 [(2) ] 270 63250 44550 144.444443 text
grestore
63400 44750 63000 44750 10 line
63200 44600 63200 44750 10 line
63200 44950 63200 45100 10 line
63400 45061 63300 45061 10 line
63349 45010 63349 45110 10 line
63000 44850 63400 44850 10 line
63400 44850 63400 44950 10 line
63400 44950 63000 44950 10 line
63000 44950 63000 44850 10 line
grestore
gsave
false false false false 260.000000 [(47uF) ] 0 63500 44800 180.555557 text
grestore
gsave
65700 44400 65700 44600 10 line
65700 45300 65700 45100 10 line
65500 44800 65900 44800 10 line
65500 44900 65900 44900 10 line
65700 45100 65700 44900 10 line
65700 44800 65700 44600 10 line
grestore
gsave
false true false true 260.000000 [(0.1uF) ] 0 66200 45100 180.555557 text
grestore
gsave
64200 45800 64050 45800 10 line
63300 45800 63450 45800 10 line
63450 45700 64050 45700 10 line
64050 45700 64050 45900 10 line
64050 45900 63450 45900 10 line
63450 45900 63450 45700 10 line
grestore
gsave
false false false false 260.000000 [(10K) ] 0 63600 46000 180.555557 text
grestore
gsave
64600 44400 64600 44550 10 line
64600 45300 64600 45150 10 line
64500 44550 64700 44550 10 line
64700 44550 64700 45150 10 line
64700 45150 64500 45150 10 line
64500 45150 64500 44550 10 line
grestore
gsave
false false false false 260.000000 [(10K) ] 0 64700 44800 180.555557 text
grestore
gsave
66500 47600 66700 47600 10 line
gsave
false true false false 208.000000 [(1) ] 0 66650 47650 144.444443 text
grestore
67400 47600 67200 47600 10 line
gsave
false false false false 208.000000 [(2) ] 0 67250 47650 144.444443 text
grestore
67050 47800 67050 47400 10 line
67200 47600 67050 47600 10 line
66850 47600 66700 47600 10 line
66739 47800 66739 47700 10 line
66790 47749 66690 47749 10 line
66850 47400 66950 47400 10 line
66950 47400 66950 47800 10 line
66950 47800 66850 47800 10 line
66850 47800 66850 47400 10 line
grestore
gsave
false false false false 260.000000 [(1uF) ] 0 66700 47900 180.555557 text
grestore
63100 47800 63400 47800 10 line
64300 47800 64700 47800 10 line
64700 47800 64700 49100 10 line
65200 48400 65200 48000 10 line
65600 49100 65900 49100 10 line
65700 47600 66500 47600 10 line
67400 46200 68000 46200 10 line
67800 46900 68000 46900 10 line
68900 49100 69300 49100 10 line
69300 49100 69300 49000 10 line
67800 46200 67800 49100 10 line
67800 49100 68000 49100 10 line
68000 48400 67800 48400 10 line
68000 47600 67800 47600 10 line
68900 48400 68900 47600 10 line
68900 47600 69300 47600 10 line
69300 46000 69300 48100 10 line
69300 47900 69800 47900 10 line
69800 47900 69800 48500 10 line
68900 46900 69300 46900 10 line
66400 46200 66500 46200 10 line
67500 47600 67500 47000 10 line
67500 47000 66400 47000 10 line
66400 47000 66400 46200 10 line
gsave
69700 46000 69900 46000 10 line
gsave
false true false false 208.000000 [(1) ] 0 69850 46050 144.444443 text
grestore
70600 46000 70400 46000 10 line
gsave
false false false false 208.000000 [(2) ] 0 70450 46050 144.444443 text
grestore
70250 46200 70250 45800 10 line
70400 46000 70250 46000 10 line
70050 46000 69900 46000 10 line
69939 46200 69939 46100 10 line
69990 46149 69890 46149 10 line
70050 45800 70150 45800 10 line
70150 45800 70150 46200 10 line
70150 46200 70050 46200 10 line
70050 46200 70050 45800 10 line
grestore
gsave
false false false false 260.000000 [(1uF) ] 0 69900 46300 180.555557 text
grestore
70700 46000 70700 45700 10 line
69000 46000 69700 46000 10 line
gsave
72600 45300 72300 45300 10 line
gsave
false true false true 208.000000 [(1) ] 0 73150 45350 144.444443 text
grestore
72600 45100 72300 45100 10 line
gsave
false true false true 208.000000 [(2) ] 0 73150 45150 144.444443 text
grestore
72800 45300 72900 45200 10 line
72900 45200 73000 45300 10 line
72800 45300 72600 45300 10 line
73000 45100 72600 45100 10 line
72600 45000 73200 45000 10 line
73200 45000 73200 45400 10 line
73200 45400 72600 45400 10 line
72600 45400 72600 45000 10 line
grestore
gsave
false true false true 260.000000 [(Output) ] 0 73200 44900 180.555557 text
grestore
59600 44100 72000 44100 10 line
64200 45800 68000 45800 10 line
64600 45800 64600 45300 10 line
64700 47400 64400 47400 10 line
64400 47400 64400 45800 10 line
63200 45300 63200 46900 10 line
65700 45300 65700 45800 10 line
63200 44400 63200 44100 10 line
64600 44100 64600 44400 10 line
65700 44100 65700 44400 10 line
70600 46000 70700 46000 10 line
70700 44800 70700 44100 10 line
gsave
63900 43900 63900 44100 10 line
63800 43900 64000 43900 10 line
63855 43850 63945 43850 10 line
63880 43810 63920 43810 10 line
newpath
63900 44100
25
0 360 arc
fill
newpath
63900 44100
25
0 360 arc
fill
grestore
gsave
62200 47800 62400 47800 10 line
63100 47800 62900 47800 10 line
62600 48000 62600 47600 10 line
62700 48000 62700 47600 10 line
62900 47800 62700 47800 10 line
62600 47800 62400 47800 10 line
grestore
gsave
false false false false 260.000000 [(0.1uF) ] 0 62400 48100 180.555557 text
grestore
65900 47600 65900 49100 10 line
67400 47600 67500 47600 10 line
gsave
62500 47100 62500 46700 10 line
62500 47100 62800 46900 10 line
62800 46900 62500 46700 10 line
62800 47100 62800 46700 10 line
62200 46900 62400 46900 10 line
63100 46900 62900 46900 10 line
62900 46900 62800 46900 10 line
62500 46900 62400 46900 10 line
grestore
gsave
false false false false 260.000000 [(1N4001) ] 0 62300 47200 180.555557 text
grestore
63100 46900 63200 46900 10 line
60900 46800 61200 46800 10 line
62000 46900 62200 46900 10 line
gsave
61200 47000 61400 47000 10 line
61450 47000 50 0 360 10 darc
61450 46800 50 0 360 10 darc
61750 46900 50 0 360 10 darc
61450 46950 61700 46900 10 line
61200 46800 61400 46800 10 line
62000 46900 61800 46900 10 line
grestore
59800 46800 59600 46800 10 line
59600 44100 59600 47600 10 line
59600 47600 59400 47600 10 line
gsave
71400 45400 71600 45400 10 line
71650 45400 50 0 360 10 darc
71650 45200 50 0 360 10 darc
71950 45300 50 0 360 10 darc
71650 45350 71900 45300 10 line
71400 45200 71600 45200 10 line
72200 45300 72000 45300 10 line
grestore
71400 45200 71200 45200 10 line
72200 45300 72300 45300 10 line
72300 45100 72000 45100 10 line
72000 44100 72000 45100 10 line
59400 47800 62200 47800 10 line
71400 45400 71200 45400 10 line
71200 45400 71200 49700 10 line
71200 49700 60900 49700 10 line
60900 49700 60900 47800 10 line
61600 46900 61600 46800 10 line
61600 46700 61600 46600 10 line
61600 46500 61600 46400 10 line
61600 46300 61600 46200 10 line
61600 46100 61600 46000 10 line
61600 45900 61600 45800 10 line
61600 45700 61600 45600 10 line
61600 45500 61600 45400 10 line
61600 45300 61600 45200 10 line
61600 45100 61600 45000 10 line
61600 44900 61600 44800 10 line
61600 44700 61600 44600 10 line
61600 44500 61600 44400 10 line
61600 44300 61600 44200 10 line
61600 44100 61600 44000 10 line
61600 43900 61600 43800 10 line
61600 43700 61600 43600 10 line
71800 43600 71800 43700 10 line
71800 43800 71800 43900 10 line
71800 44000 71800 44100 10 line
71800 44200 71800 44300 10 line
71800 44400 71800 44500 10 line
71800 44600 71800 44700 10 line
71800 44800 71800 44900 10 line
71800 45000 71800 45100 10 line
71800 45200 71800 45300 10 line
61600 43600 61700 43600 10 line
61800 43600 61900 43600 10 line
62000 43600 62100 43600 10 line
62200 43600 62300 43600 10 line
62400 43600 62500 43600 10 line
62600 43600 62700 43600 10 line
62800 43600 62900 43600 10 line
63000 43600 63100 43600 10 line
63200 43600 63300 43600 10 line
63400 43600 63500 43600 10 line
63600 43600 63700 43600 10 line
63800 43600 63900 43600 10 line
64000 43600 64100 43600 10 line
64200 43600 64300 43600 10 line
64400 43600 64500 43600 10 line
64600 43600 64700 43600 10 line
64800 43600 64900 43600 10 line
65000 43600 65100 43600 10 line
65200 43600 65300 43600 10 line
65400 43600 65500 43600 10 line
65600 43600 65700 43600 10 line
65800 43600 65900 43600 10 line
66000 43600 66100 43600 10 line
66200 43600 66300 43600 10 line
66400 43600 66500 43600 10 line
66600 43600 66700 43600 10 line
66800 43600 66900 43600 10 line
67000 43600 67100 43600 10 line
67200 43600 67300 43600 10 line
67400 43600 67500 43600 10 line
67600 43600 67700 43600 10 line
67800 43600 67900 43600 10 line
68000 43600 68100 43600 10 line
68200 43600 68300 43600 10 line
68400 43600 68500 43600 10 line
68600 43600 68700 43600 10 line
68800 43600 68900 43600 10 line
69000 43600 69100 43600 10 line
69200 43600 69300 43600 10 line
69400 43600 69500 43600 10 line
69600 43600 69700 43600 10 line
69800 43600 69900 43600 10 line
70000 43600 70100 43600 10 line
70200 43600 70300 43600 10 line
70400 43600 70500 43600 10 line
70600 43600 70700 43600 10 line
70800 43600 70900 43600 10 line
71000 43600 71100 43600 10 line
71200 43600 71300 43600 10 line
71400 43600 71500 43600 10 line
71600 43600 71700 43600 10 line
63200 45800 63300 45800 10 line
gsave
62100 45600 62100 45750 10 line
62100 46500 62100 46350 10 line
62000 45750 62200 45750 10 line
62200 45750 62200 46350 10 line
62200 46350 62000 46350 10 line
62000 46350 62000 45750 10 line
grestore
gsave
false false false false 260.000000 [(470R) ] 0 62300 46100 180.555557 text
grestore
gsave
62100 45400 62100 45200 10 line
62100 44500 62100 44700 10 line
62200 45000 62100 44900 10 line
62100 44900 62000 45000 10 line
62200 45000 62000 45000 10 line
62200 44900 62000 44900 10 line
62100 44900 62100 44700 10 line
62100 45000 62100 45200 10 line
62100 44950 200 0 360 10 darc
62403 44884 62504 44783 10 line
62504 44783 62455 44779 10 line
62455 44779 62557 44678 10 line
62318 44916 62418 44815 10 line
62418 44815 62369 44811 10 line
62369 44811 62470 44710 10 line
gsave
false true false false 208.000000 [(1) ] 270 62150 45250 144.444443 text
grestore
gsave
false false false false 208.000000 [(2) ] 270 62150 44650 144.444443 text
grestore
grestore
gsave
false false false false 260.000000 [(On LED) ] 0 62300 45200 180.555557 text
grestore
62100 46900 62100 46500 10 line
62100 45600 62100 45400 10 line
62100 44500 62100 44100 10 line
newpath
64700 47800
25
0 360 arc
fill
newpath
64700 47800
25
0 360 arc
fill
newpath
65900 47600
25
0 360 arc
fill
newpath
67800 46200
25
0 360 arc
fill
newpath
67800 46900
25
0 360 arc
fill
newpath
67800 46900
25
0 360 arc
fill
newpath
67800 46200
25
0 360 arc
fill
newpath
67800 46200
25
0 360 arc
fill
newpath
67800 46900
25
0 360 arc
fill
newpath
67800 48400
25
0 360 arc
fill
newpath
67800 47600
25
0 360 arc
fill
newpath
67800 48400
25
0 360 arc
fill
newpath
67800 48400
25
0 360 arc
fill
newpath
67800 47600
25
0 360 arc
fill
newpath
67800 47600
25
0 360 arc
fill
newpath
68900 47600
25
0 360 arc
fill
newpath
68900 47600
25
0 360 arc
fill
newpath
69300 47600
25
0 360 arc
fill
newpath
69300 47600
25
0 360 arc
fill
newpath
69300 46000
25
0 360 arc
fill
newpath
69300 47600
25
0 360 arc
fill
newpath
69300 47900
25
0 360 arc
fill
newpath
69300 46900
25
0 360 arc
fill
newpath
69300 46000
25
0 360 arc
fill
newpath
69300 47900
25
0 360 arc
fill
newpath
69300 47900
25
0 360 arc
fill
newpath
69300 46900
25
0 360 arc
fill
newpath
69300 46900
25
0 360 arc
fill
newpath
69300 46000
25
0 360 arc
fill
newpath
63200 44100
25
0 360 arc
fill
newpath
64600 44100
25
0 360 arc
fill
newpath
65700 44100
25
0 360 arc
fill
newpath
70700 44100
25
0 360 arc
fill
newpath
63900 44100
25
0 360 arc
fill
newpath
62100 44100
25
0 360 arc
fill
newpath
64600 45800
25
0 360 arc
fill
newpath
64400 45800
25
0 360 arc
fill
newpath
65700 45800
25
0 360 arc
fill
newpath
64600 45800
25
0 360 arc
fill
newpath
64600 45800
25
0 360 arc
fill
newpath
64400 45800
25
0 360 arc
fill
newpath
64400 45800
25
0 360 arc
fill
newpath
63200 45800
25
0 360 arc
fill
newpath
65700 45800
25
0 360 arc
fill
newpath
65700 45800
25
0 360 arc
fill
newpath
63200 44100
25
0 360 arc
fill
newpath
63200 44100
25
0 360 arc
fill
newpath
64600 44100
25
0 360 arc
fill
newpath
64600 44100
25
0 360 arc
fill
newpath
65700 44100
25
0 360 arc
fill
newpath
65700 44100
25
0 360 arc
fill
newpath
70700 44100
25
0 360 arc
fill
newpath
70700 44100
25
0 360 arc
fill
newpath
63900 44100
25
0 360 arc
fill
newpath
63900 44100
25
0 360 arc
fill
newpath
65900 47600
25
0 360 arc
fill
newpath
65900 47600
25
0 360 arc
fill
newpath
62100 46900
25
0 360 arc
fill
newpath
59600 46800
25
0 360 arc
fill
newpath
59600 46800
25
0 360 arc
fill
newpath
59600 46800
25
0 360 arc
fill
newpath
60900 47800
25
0 360 arc
fill
newpath
60900 47800
25
0 360 arc
fill
newpath
60900 47800
25
0 360 arc
fill
newpath
63200 45800
25
0 360 arc
fill
newpath
63200 45800
25
0 360 arc
fill
newpath
62100 46900
25
0 360 arc
fill
newpath
62100 46900
25
0 360 arc
fill
newpath
62100 44100
25
0 360 arc
fill
newpath
62100 44100
25
0 360 arc
fill
showpage
%%End
